// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var GameTable = GameTable || {};

/**
 * @constructor
 */
GameTable.Gacha = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {GameTable.Gacha}
 */
GameTable.Gacha.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {GameTable.Gacha=} obj
 * @returns {GameTable.Gacha}
 */
GameTable.Gacha.getRootAsGacha = function(bb, obj) {
  return (obj || new GameTable.Gacha).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
GameTable.Gacha.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
GameTable.Gacha.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
GameTable.Gacha.prototype.percent = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
GameTable.Gacha.prototype.strTest = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
GameTable.Gacha.startGacha = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
GameTable.Gacha.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 */
GameTable.Gacha.addValue = function(builder, value) {
  builder.addFieldInt32(1, value, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} percent
 */
GameTable.Gacha.addPercent = function(builder, percent) {
  builder.addFieldInt32(2, percent, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} strTestOffset
 */
GameTable.Gacha.addStrTest = function(builder, strTestOffset) {
  builder.addFieldOffset(3, strTestOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
GameTable.Gacha.endGacha = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {number} value
 * @param {number} percent
 * @param {flatbuffers.Offset} strTestOffset
 * @returns {flatbuffers.Offset}
 */
GameTable.Gacha.createGacha = function(builder, id, value, percent, strTestOffset) {
  GameTable.Gacha.startGacha(builder);
  GameTable.Gacha.addId(builder, id);
  GameTable.Gacha.addValue(builder, value);
  GameTable.Gacha.addPercent(builder, percent);
  GameTable.Gacha.addStrTest(builder, strTestOffset);
  return GameTable.Gacha.endGacha(builder);
}

/**
 * @constructor
 */
GameTable.Gacha2 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {GameTable.Gacha2}
 */
GameTable.Gacha2.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {GameTable.Gacha2=} obj
 * @returns {GameTable.Gacha2}
 */
GameTable.Gacha2.getRootAsGacha2 = function(bb, obj) {
  return (obj || new GameTable.Gacha2).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
GameTable.Gacha2.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
GameTable.Gacha2.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
GameTable.Gacha2.prototype.percent = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
GameTable.Gacha2.prototype.strTest = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
GameTable.Gacha2.startGacha2 = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
GameTable.Gacha2.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 */
GameTable.Gacha2.addValue = function(builder, value) {
  builder.addFieldInt32(1, value, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} percent
 */
GameTable.Gacha2.addPercent = function(builder, percent) {
  builder.addFieldInt32(2, percent, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} strTestOffset
 */
GameTable.Gacha2.addStrTest = function(builder, strTestOffset) {
  builder.addFieldOffset(3, strTestOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
GameTable.Gacha2.endGacha2 = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {number} value
 * @param {number} percent
 * @param {flatbuffers.Offset} strTestOffset
 * @returns {flatbuffers.Offset}
 */
GameTable.Gacha2.createGacha2 = function(builder, id, value, percent, strTestOffset) {
  GameTable.Gacha2.startGacha2(builder);
  GameTable.Gacha2.addId(builder, id);
  GameTable.Gacha2.addValue(builder, value);
  GameTable.Gacha2.addPercent(builder, percent);
  GameTable.Gacha2.addStrTest(builder, strTestOffset);
  return GameTable.Gacha2.endGacha2(builder);
}

/**
 * @constructor
 */
GameTable.All = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {GameTable.All}
 */
GameTable.All.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {GameTable.All=} obj
 * @returns {GameTable.All}
 */
GameTable.All.getRootAsAll = function(bb, obj) {
  return (obj || new GameTable.All).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {GameTable.Gacha=} obj
 * @returns {GameTable.Gacha}
 */
GameTable.All.prototype.Gacha = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new GameTable.Gacha).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
GameTable.All.prototype.GachaLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {GameTable.Gacha2=} obj
 * @returns {GameTable.Gacha2}
 */
GameTable.All.prototype.Gacha2 = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new GameTable.Gacha2).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
GameTable.All.prototype.Gacha2Length = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
GameTable.All.startAll = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} GachaOffset
 */
GameTable.All.addGacha = function(builder, GachaOffset) {
  builder.addFieldOffset(0, GachaOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
GameTable.All.createGachaVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
GameTable.All.startGachaVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} Gacha2Offset
 */
GameTable.All.addGacha2 = function(builder, Gacha2Offset) {
  builder.addFieldOffset(1, Gacha2Offset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
GameTable.All.createGacha2Vector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
GameTable.All.startGacha2Vector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
GameTable.All.endAll = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} GachaOffset
 * @param {flatbuffers.Offset} Gacha2Offset
 * @returns {flatbuffers.Offset}
 */
GameTable.All.createAll = function(builder, GachaOffset, Gacha2Offset) {
  GameTable.All.startAll(builder);
  GameTable.All.addGacha(builder, GachaOffset);
  GameTable.All.addGacha2(builder, Gacha2Offset);
  return GameTable.All.endAll(builder);
}

// Exports for Node.js and RequireJS
this.GameTable = GameTable;
